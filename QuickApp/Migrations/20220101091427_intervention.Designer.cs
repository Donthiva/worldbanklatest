// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace QuickApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220101091427_intervention")]
    partial class intervention
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DAL.Models.ApBusinessDocuments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("apBusinessDocuments");
                });

            modelBuilder.Entity("DAL.Models.ApDocuments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("ApDocuments");
                });

            modelBuilder.Entity("DAL.Models.ApImages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("ApImages");
                });

            modelBuilder.Entity("DAL.Models.ApUserImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId")
                        .IsUnique()
                        .HasFilter("[PersonId] IS NOT NULL");

                    b.ToTable("ApUserImage");
                });

            modelBuilder.Entity("DAL.Models.ApVideos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("ApVideos");
                });

            modelBuilder.Entity("DAL.Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("DAL.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Configuration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("DAL.Models.Audit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AffectedColumns")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("NewValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("DAL.Models.Bank_Information.Bank", b =>
                {
                    b.Property<int>("Bank_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bank_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Bank_Type")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Bank_ID");

                    b.HasIndex("Bank_Type");

                    b.ToTable("Bank");
                });

            modelBuilder.Entity("DAL.Models.Bank_Information.Bank_Account_Type", b =>
                {
                    b.Property<int>("Bank_Account_Type_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bank_Account_Type_Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Bank_Account_Type_ID");

                    b.ToTable("Bank_Account_Type");
                });

            modelBuilder.Entity("DAL.Models.Bank_Information.Bank_Branch", b =>
                {
                    b.Property<int>("Bank_Branch_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BankID")
                        .HasColumnType("int");

                    b.Property<int>("Bank_Branch_Adress")
                        .HasColumnType("int");

                    b.Property<string>("Bank_Branch_Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Bank_Branch_ID");

                    b.HasIndex("BankID");

                    b.ToTable("Bank_Branch");
                });

            modelBuilder.Entity("DAL.Models.Bank_Information.Bank_Type", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BankTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bank_Type_Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Bank_Type");
                });

            modelBuilder.Entity("DAL.Models.Businees_Related.BusinessStaff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BusinessId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Number")
                        .HasColumnType("float");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId")
                        .IsUnique();

                    b.ToTable("BusinessStaff");
                });

            modelBuilder.Entity("DAL.Models.Businees_Related.BusinessStocks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BusinessId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("number")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId")
                        .IsUnique();

                    b.ToTable("BusinessStocks");
                });

            modelBuilder.Entity("DAL.Models.Businees_Related.BusinessVehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BusinessId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Purchased")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("number")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId")
                        .IsUnique();

                    b.ToTable("BusinessVehicle");
                });

            modelBuilder.Entity("DAL.Models.Businees_Related.Cilentele", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BusinessId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("number")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId")
                        .IsUnique();

                    b.ToTable("Cilentele");
                });

            modelBuilder.Entity("DAL.Models.Businees_Related.MachinaryEquipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BusinessId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("number")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId")
                        .IsUnique();

                    b.ToTable("MachinaryEquipment");
                });

            modelBuilder.Entity("DAL.Models.Businees_Related.ManagementPractices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BusinessId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("number")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId")
                        .IsUnique();

                    b.ToTable("ManagementPractices");
                });

            modelBuilder.Entity("DAL.Models.Businees_Related.Shopspace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BusinessId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("number")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId")
                        .IsUnique();

                    b.ToTable("Shopspace");
                });

            modelBuilder.Entity("DAL.Models.Contact_Information.Address", b =>
                {
                    b.Property<int>("Address_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address_Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address_Street1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address_Street2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Adress_Owner_ID")
                        .HasColumnType("int");

                    b.Property<int>("Adress_Owner_Type")
                        .HasColumnType("int");

                    b.Property<double>("CordinateX")
                        .HasColumnType("float");

                    b.Property<double>("CordinateY")
                        .HasColumnType("float");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("cityId")
                        .HasColumnType("int");

                    b.Property<int>("countryId")
                        .HasColumnType("int");

                    b.Property<int>("districtId")
                        .HasColumnType("int");

                    b.Property<int>("statesId")
                        .HasColumnType("int");

                    b.HasKey("Address_ID");

                    b.HasIndex("cityId");

                    b.HasIndex("countryId");

                    b.HasIndex("districtId");

                    b.HasIndex("statesId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("DAL.Models.Contact_Information.Adress_Owner_Type", b =>
                {
                    b.Property<int>("Adress_Owner_Type_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adress_Owner_Type_Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Adress_Owner_Type_ID");

                    b.ToTable("Adress_Owner_Type");
                });

            modelBuilder.Entity("DAL.Models.Contact_Information.City", b =>
                {
                    b.Property<int>("City_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("City_Country_ID")
                        .HasColumnType("int");

                    b.Property<int>("City_District_ID")
                        .HasColumnType("int");

                    b.Property<string>("City_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("City_States_ID")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("City_ID");

                    b.HasIndex("City_Country_ID");

                    b.HasIndex("City_District_ID");

                    b.HasIndex("City_States_ID");

                    b.ToTable("City");
                });

            modelBuilder.Entity("DAL.Models.Contact_Information.Country", b =>
                {
                    b.Property<int>("Country_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Country_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Country_ID");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("DAL.Models.Contact_Information.District", b =>
                {
                    b.Property<int>("District_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("District_Country_ID")
                        .HasColumnType("int");

                    b.Property<string>("District_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("District_States_ID")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("District_ID");

                    b.HasIndex("District_Country_ID");

                    b.HasIndex("District_States_ID");

                    b.ToTable("District");
                });

            modelBuilder.Entity("DAL.Models.Contact_Information.States", b =>
                {
                    b.Property<int>("States_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("States_Country_ID")
                        .HasColumnType("int");

                    b.Property<string>("States_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("districtId")
                        .HasColumnType("int");

                    b.HasKey("States_ID");

                    b.HasIndex("States_Country_ID");

                    b.ToTable("States");
                });

            modelBuilder.Entity("DAL.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("AppCustomers");
                });

            modelBuilder.Entity("DAL.Models.Customer_Related.Bank_Account", b =>
                {
                    b.Property<int>("Bank_Account_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bank_Account_Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Bank_Account_Type_ID")
                        .HasColumnType("int");

                    b.Property<int>("Bank_Branch_ID")
                        .HasColumnType("int");

                    b.Property<int>("Bank_ID")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PersonID")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Bank_Account_ID");

                    b.HasIndex("Bank_Account_Type_ID");

                    b.HasIndex("Bank_Branch_ID");

                    b.HasIndex("Bank_ID");

                    b.HasIndex("PersonID");

                    b.ToTable("Bank_Account");
                });

            modelBuilder.Entity("DAL.Models.Customer_Related.Business", b =>
                {
                    b.Property<int>("Business_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BuinessPlan2Buiness_Plan_ID")
                        .HasColumnType("int");

                    b.Property<int>("Buisness_In_Out")
                        .HasColumnType("int");

                    b.Property<int?>("BusinessAddressId")
                        .HasColumnType("int");

                    b.Property<string>("BusinessSituation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BusinessStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Business_First_Buiness_Plan")
                        .HasColumnType("int");

                    b.Property<string>("Business_GIS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Business_Investment_Sources")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Business_Management_Mode")
                        .HasColumnType("int");

                    b.Property<int?>("Business_Person_ID")
                        .HasColumnType("int");

                    b.Property<int>("Business_Second_Buiness_Plan")
                        .HasColumnType("int");

                    b.Property<string>("Business_Second_Business")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Business_Type")
                        .HasColumnType("int");

                    b.Property<int>("Business_address")
                        .HasColumnType("int");

                    b.Property<bool>("Business_changed")
                        .HasColumnType("bit");

                    b.Property<string>("CityOut")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Contactable")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrentBusiness")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DailyIncome")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("FileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GBBSBusinessDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("GSBSPreviousIncome")
                        .HasColumnType("float");

                    b.Property<string>("HowBusinessCHange")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HowIsFamilyIfdead")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IncomeStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IncomeStatusComparedToGSBS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IncomeStatusComparedToPM")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAPDead")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAlternativeSite")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBankLoan")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBusinessChangeFromInitial")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEntitlementFund")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInformalLoans")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNeedOrRequirment")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOperatingWithStableProfit")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOwnSaving")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPartnerShip")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPawingJewelary")
                        .HasColumnType("bit");

                    b.Property<bool>("IsbuinessDiversified")
                        .HasColumnType("bit");

                    b.Property<bool>("IsneedRequested")
                        .HasColumnType("bit");

                    b.Property<double>("MonthlyIncome")
                        .HasColumnType("float");

                    b.Property<string>("OldBusinesses")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreviousBusiness")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequirmentNeed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecialObservation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("businessSummary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("monitorId")
                        .HasColumnType("int");

                    b.Property<int>("monitorPeriodId")
                        .HasColumnType("int");

                    b.Property<DateTime>("relocatedMonthAndYear")
                        .HasColumnType("datetime2");

                    b.HasKey("Business_ID");

                    b.HasIndex("BuinessPlan2Buiness_Plan_ID");

                    b.HasIndex("BusinessAddressId")
                        .IsUnique()
                        .HasFilter("[BusinessAddressId] IS NOT NULL");

                    b.HasIndex("Business_First_Buiness_Plan");

                    b.HasIndex("Business_Management_Mode");

                    b.HasIndex("Business_Person_ID");

                    b.HasIndex("Business_Type");

                    b.HasIndex("monitorId")
                        .IsUnique();

                    b.HasIndex("monitorPeriodId");

                    b.ToTable("Businesses");
                });

            modelBuilder.Entity("DAL.Models.Customer_Related.Business_Situation", b =>
                {
                    b.Property<int>("Business_Situation_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BS_Business_Person_ID")
                        .HasColumnType("int");

                    b.Property<string>("BS_New_Business_PostCovid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BS_Postcovid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BS_Precovid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Situation_of_the_business")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Business_Situation_ID");

                    b.HasIndex("BS_Business_Person_ID")
                        .IsUnique();

                    b.ToTable("Business_Situation");
                });

            modelBuilder.Entity("DAL.Models.Customer_Related.Entittlment", b =>
                {
                    b.Property<int>("Entittlment_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Entittlment_Grand_Total")
                        .HasColumnType("float");

                    b.Property<int>("Entittlment_Person_ID")
                        .HasColumnType("int");

                    b.Property<double>("Entittlment_Sub_Total")
                        .HasColumnType("float");

                    b.Property<double>("Entittlment_retention_10_percent")
                        .HasColumnType("float");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Entittlment_ID");

                    b.HasIndex("Entittlment_Person_ID");

                    b.ToTable("Entittlments");
                });

            modelBuilder.Entity("DAL.Models.Customer_Related.Person", b =>
                {
                    b.Property<int>("Person_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BusinessPlanNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("DOA")
                        .HasColumnType("bit");

                    b.Property<DateTime>("EACdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Education")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Employer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("EntitlementFund")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("GSBSLivelihoodEngagement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GenderUser_Gender_ID")
                        .HasColumnType("int");

                    b.Property<bool>("IsEntitleFund")
                        .HasColumnType("bit");

                    b.Property<int>("MonthlyIncome")
                        .HasColumnType("int");

                    b.Property<int>("Person_Address")
                        .HasColumnType("int");

                    b.Property<double>("Person_Contact_Number")
                        .HasColumnType("float");

                    b.Property<string>("Person_DOB")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Person_File_number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Person_Gender")
                        .HasColumnType("int");

                    b.Property<string>("Person_NIC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Person_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Person_Type")
                        .HasColumnType("int");

                    b.Property<int>("PreviousTypeId")
                        .HasColumnType("int");

                    b.Property<string>("SpecialObservationsatGSBS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("businessOrLivelihoodRelocationId")
                        .HasColumnType("int");

                    b.Property<int>("educationalLevelId")
                        .HasColumnType("int");

                    b.Property<int>("martialStatusId")
                        .HasColumnType("int");

                    b.HasKey("Person_ID");

                    b.HasIndex("GenderUser_Gender_ID");

                    b.HasIndex("Person_Address")
                        .IsUnique();

                    b.HasIndex("Person_Type");

                    b.HasIndex("businessOrLivelihoodRelocationId");

                    b.HasIndex("educationalLevelId");

                    b.HasIndex("martialStatusId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("DAL.Models.Genaral.BusinessGeneral", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BusineesPlanId")
                        .HasColumnType("int");

                    b.Property<int>("BusinessAPType")
                        .HasColumnType("int");

                    b.Property<string>("BusinessInformationNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BusinessPlanNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BusinessTypeId")
                        .HasColumnType("int");

                    b.Property<string>("BusinessTypeNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Business_BusinessLoaction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GSBSLivelihoodEngagement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("GSBSPreviousIncome")
                        .HasColumnType("float");

                    b.Property<bool>("IsBankLoans")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBusinessChanged")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBusinessPlanChangeFromInitialBP")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEntilementFund")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFirstBusinessPlan")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInformalLoans")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOwnService")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPartnerShip")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPawingJewelery")
                        .HasColumnType("bit");

                    b.Property<int>("MonthlyIncome")
                        .HasColumnType("int");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("PreviousBusinessAtGoodShed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelocatedMonthandyear")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecialObservationsatGSBS")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BusineesPlanId");

                    b.HasIndex("BusinessTypeId");

                    b.HasIndex("PersonId")
                        .IsUnique()
                        .HasFilter("[PersonId] IS NOT NULL");

                    b.ToTable("BusinessGeneral");
                });

            modelBuilder.Entity("DAL.Models.Genaral.BusinessOrLivelihoodRelocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("businessOrLivelihoodRelocation");
                });

            modelBuilder.Entity("DAL.Models.Genaral.EducationLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("educationLevel");
                });

            modelBuilder.Entity("DAL.Models.Genaral.EmployeeGeneral", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EmployeeBusinessLivelihoodRealocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeRealocatedMonthandYear")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeSpecialNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Employer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobRole")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.Property<double>("Salary")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("PersonId")
                        .IsUnique()
                        .HasFilter("[PersonId] IS NOT NULL");

                    b.ToTable("EmployeeGeneral");
                });

            modelBuilder.Entity("DAL.Models.Genaral.EventwiseParticipants", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("ParticipantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventwiseParticipants");
                });

            modelBuilder.Entity("DAL.Models.Genaral.Gender", b =>
                {
                    b.Property<int>("User_Gender_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("User_Gender")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("User_Gender_ID");

                    b.ToTable("Gender");
                });

            modelBuilder.Entity("DAL.Models.Genaral.Intervention", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("BriefDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("MainStakeholdersParticipated")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameOfEvent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfParticipants")
                        .HasColumnType("int");

                    b.Property<int>("TypeOfEventId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Intervention");
                });

            modelBuilder.Entity("DAL.Models.Genaral.MartialStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("martialStatus");
                });

            modelBuilder.Entity("DAL.Models.Genaral.PhaseOutGeneral", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BusinessPlan")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("EntitlementFund")
                        .HasColumnType("float");

                    b.Property<bool>("IsIncomeGeneratingSources")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInterestOfFixedDeposit")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLivesWithcloseFamily")
                        .HasColumnType("bit");

                    b.Property<string>("MonthAndYearPhaseOut")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PersonID")
                        .HasColumnType("int");

                    b.Property<string>("PhaseOutDecisionMade")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonForPhaseout")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SocialEconomicWellbeing")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UseofEntitlementFund")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PersonID")
                        .IsUnique()
                        .HasFilter("[PersonID] IS NOT NULL");

                    b.ToTable("PhaseOutGeneral");
                });

            modelBuilder.Entity("DAL.Models.Genaral.ThreeWheelGeneral", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BusinessLivelihoodRealocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BusinessLoaction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EngagementAtGSBS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GSBSLivelihoodEngagement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InitialParkAtGSBS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MonthlyIncome")
                        .HasColumnType("int");

                    b.Property<double>("MonthlyIncomeAtGSBS")
                        .HasColumnType("float");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("RealocatedMonthandYear")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecialObservationsatGSBS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("specialNotes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PersonId")
                        .IsUnique()
                        .HasFilter("[PersonId] IS NOT NULL");

                    b.ToTable("ThreeWheelGeneral");
                });

            modelBuilder.Entity("DAL.Models.Monitoring_Information.BusinessMonitorDocuments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Business_ID")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeMonitorId")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Business_ID");

                    b.ToTable("businessMonitorDocuments");
                });

            modelBuilder.Entity("DAL.Models.Monitoring_Information.BusinessMonitorImages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Business_ID")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeMonitorId")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Business_ID");

                    b.ToTable("businessMonitorImages");
                });

            modelBuilder.Entity("DAL.Models.Monitoring_Information.BusinessMonitorVideos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Business_ID")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeMonitorId")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Business_ID");

                    b.ToTable("businessMonitorVideos");
                });

            modelBuilder.Entity("DAL.Models.Monitoring_Information.BusinessType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BusinessTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BusinessType");
                });

            modelBuilder.Entity("DAL.Models.Monitoring_Information.Business_Management_Mode", b =>
                {
                    b.Property<int>("Business_Management_Mode_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Business_Management_Mode_Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Business_Management_Mode_ID");

                    b.ToTable("Business_Management_Mode");
                });

            modelBuilder.Entity("DAL.Models.Monitoring_Information.Business_Plan", b =>
                {
                    b.Property<int>("Buiness_Plan_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Buiness_Plan_Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Buiness_Plan_ID");

                    b.ToTable("Buiness_Plan");
                });

            modelBuilder.Entity("DAL.Models.Monitoring_Information.EmployeeMonitorDocuments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmployeeMonitorId")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeMonitorId");

                    b.ToTable("employeeMonitorDocuments");
                });

            modelBuilder.Entity("DAL.Models.Monitoring_Information.EmployeeMonitorImages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmployeeMonitorId")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeMonitorId");

                    b.ToTable("employeeMonitorImages");
                });

            modelBuilder.Entity("DAL.Models.Monitoring_Information.EmployeeMonitorVideos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmployeeMonitorId")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeMonitorId");

                    b.ToTable("employeeMonitorVideos");
                });

            modelBuilder.Entity("DAL.Models.Monitoring_Information.Employer_Type", b =>
                {
                    b.Property<int>("Employer_Type_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Employer_Type_Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Employer_Type_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Employer_Type_ID");

                    b.ToTable("Employer_Type");
                });

            modelBuilder.Entity("DAL.Models.Monitoring_Information.Employment", b =>
                {
                    b.Property<int>("Employment_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnyRequestNeed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Contactable")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrentEmployer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrentJob")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Current_Employer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DailyIncome")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("EmployementAddressId")
                        .HasColumnType("int");

                    b.Property<int>("Employment_Duration")
                        .HasColumnType("int");

                    b.Property<string>("Employment_Employer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Employment_Employer_Type")
                        .HasColumnType("int");

                    b.Property<string>("Employment_How_he_found_the_job")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Employment_If_not_angeged_in_a_job_reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Employment_Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Employment_Salary")
                        .HasColumnType("float");

                    b.Property<DateTime>("Employment_Started_date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Employment_Status")
                        .HasColumnType("int");

                    b.Property<int>("Employment_Type")
                        .HasColumnType("int");

                    b.Property<string>("HowJobFound")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IncomStatusComparedtoGSBS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IncomeStatusComparedtoPM")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEmployee")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSameEmployer")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSameEmployerCTG")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSameSameEmployerCPM")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSimilarCapacity")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSimilarCapasityComparedToGSBS")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSimilarCapasityComparedToPreviousMonitor")
                        .HasColumnType("bit");

                    b.Property<string>("JobStartedDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Job_Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("JobengagementID")
                        .HasColumnType("int");

                    b.Property<int>("MonitorID")
                        .HasColumnType("int");

                    b.Property<decimal>("MonthlyIncome")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Person_ID")
                        .HasColumnType("int");

                    b.Property<string>("SalaryStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Situation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("monitorPeriodId")
                        .HasColumnType("int");

                    b.HasKey("Employment_ID");

                    b.HasIndex("EmployementAddressId")
                        .IsUnique()
                        .HasFilter("[EmployementAddressId] IS NOT NULL");

                    b.HasIndex("Employment_Status");

                    b.HasIndex("Employment_Type");

                    b.HasIndex("JobengagementID");

                    b.HasIndex("MonitorID")
                        .IsUnique();

                    b.HasIndex("Person_ID");

                    b.HasIndex("monitorPeriodId");

                    b.ToTable("Employment");
                });

            modelBuilder.Entity("DAL.Models.Monitoring_Information.Employment_Status", b =>
                {
                    b.Property<int>("Employment_Status_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status_Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Employment_Status_ID");

                    b.ToTable("Employment_Status");
                });

            modelBuilder.Entity("DAL.Models.Monitoring_Information.Employment_Type", b =>
                {
                    b.Property<int>("Employment_Type_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Employment_Type_Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Employment_Type_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Employment_Type_ID");

                    b.ToTable("Employment_Type");
                });

            modelBuilder.Entity("DAL.Models.Monitoring_Information.JobEngagement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("engagement")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("JobEngagement");
                });

            modelBuilder.Entity("DAL.Models.Monitoring_Information.Monitor", b =>
                {
                    b.Property<int>("Monitor_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Monitor_Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Monitor_Duration")
                        .HasColumnType("int");

                    b.Property<int>("Monitor_LRP_Responds_action")
                        .HasColumnType("int");

                    b.Property<double>("Monitor_Monthly_income")
                        .HasColumnType("float");

                    b.Property<int?>("Monitor_Person_ID")
                        .HasColumnType("int");

                    b.Property<string>("Monitor_Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Monitor_Update")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Monitor_ID");

                    b.HasIndex("Monitor_Duration");

                    b.HasIndex("Monitor_Person_ID");

                    b.ToTable("Monitor");
                });

            modelBuilder.Entity("DAL.Models.Monitoring_Information.MonitorPerioid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PeroildName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("MonitorPerioid");
                });

            modelBuilder.Entity("DAL.Models.Monitoring_Information.Monitor_Duration", b =>
                {
                    b.Property<int>("Monitor_Duratione_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Monitor_Duration_Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Monitor_Duration_End_date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Monitor_Duration_Start_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Monitor_Duratione_ID");

                    b.ToTable("Monitor_Duration");
                });

            modelBuilder.Entity("DAL.Models.Monitoring_Information.Person_Type", b =>
                {
                    b.Property<int>("Person_Type_ID")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Person_Type_Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Person_Type_ID");

                    b.ToTable("Person_Type");
                });

            modelBuilder.Entity("DAL.Models.Monitoring_Information.PhaseOutMonitorDocuments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmployeeMonitorId")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeMonitorId");

                    b.ToTable("PhaseOutMonitorDocuments");
                });

            modelBuilder.Entity("DAL.Models.Monitoring_Information.PhaseOutMonitorImages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmployeeMonitorId")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeMonitorId");

                    b.ToTable("PhaseOutMonitorImages");
                });

            modelBuilder.Entity("DAL.Models.Monitoring_Information.PhaseOutMonitorVideos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmployeeMonitorId")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeMonitorId");

                    b.ToTable("PhaseOutMonitorVideos");
                });

            modelBuilder.Entity("DAL.Models.Monitoring_Information.PreviousType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Person_Type_Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Person_Type_ID")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("previousType");
                });

            modelBuilder.Entity("DAL.Models.Monitoring_Information.ThreeWheelMonitorDocuments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmployeeMonitorId")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeMonitorId");

                    b.ToTable("threeWheelMonitorDocuments");
                });

            modelBuilder.Entity("DAL.Models.Monitoring_Information.ThreeWheelMonitorImages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmployeeMonitorId")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeMonitorId");

                    b.ToTable("threeWheelMonitorImages");
                });

            modelBuilder.Entity("DAL.Models.Monitoring_Information.ThreeWheelMonitorVideos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmployeeMonitorId")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeMonitorId");

                    b.ToTable("threeWheelMonitorVideos");
                });

            modelBuilder.Entity("DAL.Models.Monitoring_Information.ThreeWheeler", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Contactable")
                        .HasColumnType("bit");

                    b.Property<string>("CurrentPark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DailyIncome")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("EngauagmentAtGSBS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Haveotherincomegeneratingsources")
                        .HasColumnType("bit");

                    b.Property<string>("IncomeStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InitalParkAtGSBS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MonitorId")
                        .HasColumnType("int");

                    b.Property<double>("MonthlyIcomeAtGSBS")
                        .HasColumnType("float");

                    b.Property<double>("MonthlyIncome")
                        .HasColumnType("float");

                    b.Property<int?>("PersonID")
                        .HasColumnType("int");

                    b.Property<string>("Situation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecialObservation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Threewheelpark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Workingdays")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("monitorPeriodId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MonitorId")
                        .IsUnique();

                    b.HasIndex("PersonID");

                    b.HasIndex("monitorPeriodId");

                    b.ToTable("ThreeWheeler");
                });

            modelBuilder.Entity("DAL.Models.Monitoring_Information.Training", b =>
                {
                    b.Property<int>("Training_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DS_office")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEmployed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmployedSectorRelated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFamilyMemberCompletedTraining")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFamilyMemberInvolved")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SalaryStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SocialRecognition")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrainigOrganization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrainigPeriod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TrainingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TrainingDoneBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Training_Need")
                        .HasColumnType("bit");

                    b.Property<int?>("Training_Person_ID")
                        .HasColumnType("int");

                    b.Property<int>("Training_Type")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Training_ID");

                    b.HasIndex("Training_Person_ID");

                    b.HasIndex("Training_Type");

                    b.ToTable("Training");
                });

            modelBuilder.Entity("DAL.Models.Monitoring_Information.Training_Type", b =>
                {
                    b.Property<int>("Training_Type_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Training_Type_Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Training_Type_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Training_Type_ID");

                    b.ToTable("Training_Type");
                });

            modelBuilder.Entity("DAL.Models.Monitoring_Information.Vulnerability", b =>
                {
                    b.Property<int>("Vulnerability_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BackgroundInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InitialProjectInput")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherVulnerability")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Vulnerability_Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Vulnerability_IS_Vulnerable")
                        .HasColumnType("bit");

                    b.Property<int>("Vulnerability_Level")
                        .HasColumnType("int");

                    b.Property<int?>("Vulnerability_Person_ID")
                        .HasColumnType("int");

                    b.Property<string>("Vulnerability_Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Vulnerability_Type")
                        .HasColumnType("int");

                    b.HasKey("Vulnerability_ID");

                    b.HasIndex("Vulnerability_Level");

                    b.HasIndex("Vulnerability_Person_ID")
                        .IsUnique()
                        .HasFilter("[Vulnerability_Person_ID] IS NOT NULL");

                    b.HasIndex("Vulnerability_Type");

                    b.ToTable("Vulnerability");
                });

            modelBuilder.Entity("DAL.Models.Monitoring_Information.VulnerabilityMonitor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("BetterSocialFamilyEnvironment")
                        .HasColumnType("bit");

                    b.Property<bool>("CoverDaytoDayExpenses")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBetterPhysicalLivingFacility")
                        .HasColumnType("bit");

                    b.Property<bool>("IsIncomeSecure")
                        .HasColumnType("bit");

                    b.Property<int>("MonitorId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Period")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("ProjectInput")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ProtectionAndSecurity")
                        .HasColumnType("bit");

                    b.Property<string>("Stability")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VulnerabilityID")
                        .HasColumnType("int");

                    b.Property<string>("VulnerabilityStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("monitorPeriodId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MonitorId")
                        .IsUnique();

                    b.HasIndex("PersonId");

                    b.HasIndex("VulnerabilityID");

                    b.HasIndex("monitorPeriodId");

                    b.ToTable("VulnerabilityMonitor");
                });

            modelBuilder.Entity("DAL.Models.Monitoring_Information.Vulnerability_Level", b =>
                {
                    b.Property<int>("Vulnerability_Level_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Vulnerability_Level_Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Vulnerability_Level_Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Vulnerability_Level_ID");

                    b.ToTable("Vulnerability_Level");
                });

            modelBuilder.Entity("DAL.Models.Monitoring_Information.Vulnerability_Type", b =>
                {
                    b.Property<int>("Vulnerability_Type_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Vulnerability_Type_Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Vulnerability_Type_Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Vulnerability_Type_ID");

                    b.ToTable("Vulnerability_Type");
                });

            modelBuilder.Entity("DAL.Models.Monitoring_Information.phaseOut", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Bettercaringandprotection")
                        .HasColumnType("bit");

                    b.Property<bool>("Betterphysicallivingcondition")
                        .HasColumnType("bit");

                    b.Property<bool>("Contactable")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Dateofphaseout")
                        .HasColumnType("datetime2");

                    b.Property<string>("DecisionMade")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Dependonclosefamily")
                        .HasColumnType("bit");

                    b.Property<string>("EconomyWellBeign")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntileMentFundReceive")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Healthy")
                        .HasColumnType("bit");

                    b.Property<bool>("IsIncomeGeneratingSources")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInterestOfFixedDeposit")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLivesWithcloseFamily")
                        .HasColumnType("bit");

                    b.Property<bool>("Isaprequirement")
                        .HasColumnType("bit");

                    b.Property<bool>("Isourintervention")
                        .HasColumnType("bit");

                    b.Property<int>("MonitorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Monitordate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MonthAndYear")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Otherincomegeneratingnote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ourinterventionnote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PersonID")
                        .HasColumnType("int");

                    b.Property<string>("PlanedBusiness")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonForPhaseOut")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Satisfactionlevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Situation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SocialWellBeing")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UseOfEntileFund")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("monitorPeriodId")
                        .HasColumnType("int");

                    b.Property<string>("requirementnote")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MonitorId")
                        .IsUnique();

                    b.HasIndex("PersonID");

                    b.HasIndex("monitorPeriodId");

                    b.ToTable("phaseOut");
                });

            modelBuilder.Entity("DAL.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CashierId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Comments")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CashierId");

                    b.HasIndex("CustomerId");

                    b.ToTable("AppOrders");
                });

            modelBuilder.Entity("DAL.Models.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("AppOrderDetails");
                });

            modelBuilder.Entity("DAL.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("BuyingPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Icon")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDiscontinued")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("ProductCategoryId")
                        .HasColumnType("int");

                    b.Property<decimal>("SellingPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UnitsInStock")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("ParentId");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("AppProducts");
                });

            modelBuilder.Entity("DAL.Models.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AppProductCategories");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DAL.Models.ApBusinessDocuments", b =>
                {
                    b.HasOne("DAL.Models.Customer_Related.Person", "person")
                        .WithMany("apBusinessDocs")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("person");
                });

            modelBuilder.Entity("DAL.Models.ApDocuments", b =>
                {
                    b.HasOne("DAL.Models.Customer_Related.Person", "person")
                        .WithMany("apDocuments")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("person");
                });

            modelBuilder.Entity("DAL.Models.ApImages", b =>
                {
                    b.HasOne("DAL.Models.Customer_Related.Person", "person")
                        .WithMany("apImages")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("person");
                });

            modelBuilder.Entity("DAL.Models.ApUserImage", b =>
                {
                    b.HasOne("DAL.Models.Customer_Related.Person", "person")
                        .WithOne("apUserImage")
                        .HasForeignKey("DAL.Models.ApUserImage", "PersonId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("person");
                });

            modelBuilder.Entity("DAL.Models.ApVideos", b =>
                {
                    b.HasOne("DAL.Models.Customer_Related.Person", "person")
                        .WithMany("apVideos")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("person");
                });

            modelBuilder.Entity("DAL.Models.Bank_Information.Bank", b =>
                {
                    b.HasOne("DAL.Models.Bank_Information.Bank_Type", "bankType")
                        .WithMany("bank")
                        .HasForeignKey("Bank_Type")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("bankType");
                });

            modelBuilder.Entity("DAL.Models.Bank_Information.Bank_Branch", b =>
                {
                    b.HasOne("DAL.Models.Bank_Information.Bank", "bank")
                        .WithMany("Branch")
                        .HasForeignKey("BankID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("bank");
                });

            modelBuilder.Entity("DAL.Models.Businees_Related.BusinessStaff", b =>
                {
                    b.HasOne("DAL.Models.Customer_Related.Business", "business")
                        .WithOne("businessStaff")
                        .HasForeignKey("DAL.Models.Businees_Related.BusinessStaff", "BusinessId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("business");
                });

            modelBuilder.Entity("DAL.Models.Businees_Related.BusinessStocks", b =>
                {
                    b.HasOne("DAL.Models.Customer_Related.Business", "business")
                        .WithOne("businessStocks")
                        .HasForeignKey("DAL.Models.Businees_Related.BusinessStocks", "BusinessId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("business");
                });

            modelBuilder.Entity("DAL.Models.Businees_Related.BusinessVehicle", b =>
                {
                    b.HasOne("DAL.Models.Customer_Related.Business", "business")
                        .WithOne("businessVehicle")
                        .HasForeignKey("DAL.Models.Businees_Related.BusinessVehicle", "BusinessId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("business");
                });

            modelBuilder.Entity("DAL.Models.Businees_Related.Cilentele", b =>
                {
                    b.HasOne("DAL.Models.Customer_Related.Business", "business")
                        .WithOne("cilentele")
                        .HasForeignKey("DAL.Models.Businees_Related.Cilentele", "BusinessId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("business");
                });

            modelBuilder.Entity("DAL.Models.Businees_Related.MachinaryEquipment", b =>
                {
                    b.HasOne("DAL.Models.Customer_Related.Business", "business")
                        .WithOne("machinaryEquipment")
                        .HasForeignKey("DAL.Models.Businees_Related.MachinaryEquipment", "BusinessId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("business");
                });

            modelBuilder.Entity("DAL.Models.Businees_Related.ManagementPractices", b =>
                {
                    b.HasOne("DAL.Models.Customer_Related.Business", "business")
                        .WithOne("managementPractices")
                        .HasForeignKey("DAL.Models.Businees_Related.ManagementPractices", "BusinessId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("business");
                });

            modelBuilder.Entity("DAL.Models.Businees_Related.Shopspace", b =>
                {
                    b.HasOne("DAL.Models.Customer_Related.Business", "business")
                        .WithOne("shopspace")
                        .HasForeignKey("DAL.Models.Businees_Related.Shopspace", "BusinessId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("business");
                });

            modelBuilder.Entity("DAL.Models.Contact_Information.Address", b =>
                {
                    b.HasOne("DAL.Models.Contact_Information.City", "city")
                        .WithMany("address")
                        .HasForeignKey("cityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Models.Contact_Information.Country", "Country")
                        .WithMany("address")
                        .HasForeignKey("countryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Models.Contact_Information.District", "district")
                        .WithMany("address")
                        .HasForeignKey("districtId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Models.Contact_Information.States", "States")
                        .WithMany("address")
                        .HasForeignKey("statesId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("city");

                    b.Navigation("Country");

                    b.Navigation("district");

                    b.Navigation("States");
                });

            modelBuilder.Entity("DAL.Models.Contact_Information.City", b =>
                {
                    b.HasOne("DAL.Models.Contact_Information.Country", "Country")
                        .WithMany("city")
                        .HasForeignKey("City_Country_ID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Models.Contact_Information.District", "district")
                        .WithMany("city")
                        .HasForeignKey("City_District_ID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Models.Contact_Information.States", "States")
                        .WithMany("city")
                        .HasForeignKey("City_States_ID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("district");

                    b.Navigation("States");
                });

            modelBuilder.Entity("DAL.Models.Contact_Information.District", b =>
                {
                    b.HasOne("DAL.Models.Contact_Information.Country", "country")
                        .WithMany("district")
                        .HasForeignKey("District_Country_ID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Models.Contact_Information.States", "state")
                        .WithMany("district")
                        .HasForeignKey("District_States_ID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("country");

                    b.Navigation("state");
                });

            modelBuilder.Entity("DAL.Models.Contact_Information.States", b =>
                {
                    b.HasOne("DAL.Models.Contact_Information.Country", "country")
                        .WithMany("states")
                        .HasForeignKey("States_Country_ID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("country");
                });

            modelBuilder.Entity("DAL.Models.Customer_Related.Bank_Account", b =>
                {
                    b.HasOne("DAL.Models.Bank_Information.Bank_Account_Type", "BankAccountType")
                        .WithMany("Bank_Account")
                        .HasForeignKey("Bank_Account_Type_ID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Models.Bank_Information.Bank_Branch", "Bank_Branch")
                        .WithMany("Bank_Account")
                        .HasForeignKey("Bank_Branch_ID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Models.Bank_Information.Bank", "Bank")
                        .WithMany("Bank_Account")
                        .HasForeignKey("Bank_ID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Models.Customer_Related.Person", "person")
                        .WithMany("Bank")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Bank");

                    b.Navigation("Bank_Branch");

                    b.Navigation("BankAccountType");

                    b.Navigation("person");
                });

            modelBuilder.Entity("DAL.Models.Customer_Related.Business", b =>
                {
                    b.HasOne("DAL.Models.Monitoring_Information.Business_Plan", "BuinessPlan2")
                        .WithMany()
                        .HasForeignKey("BuinessPlan2Buiness_Plan_ID");

                    b.HasOne("DAL.Models.Contact_Information.Address", "address")
                        .WithOne("business")
                        .HasForeignKey("DAL.Models.Customer_Related.Business", "BusinessAddressId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DAL.Models.Monitoring_Information.Business_Plan", "BuinessPlan1")
                        .WithMany("Business")
                        .HasForeignKey("Business_First_Buiness_Plan")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Models.Monitoring_Information.Business_Management_Mode", "BusinessManagementMode")
                        .WithMany("Business")
                        .HasForeignKey("Business_Management_Mode")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Models.Customer_Related.Person", "Person")
                        .WithMany("Business")
                        .HasForeignKey("Business_Person_ID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DAL.Models.Monitoring_Information.BusinessType", "businessType")
                        .WithMany("Business")
                        .HasForeignKey("Business_Type")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Models.Monitoring_Information.Monitor", "monitor")
                        .WithOne("Business")
                        .HasForeignKey("DAL.Models.Customer_Related.Business", "monitorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Models.Monitoring_Information.MonitorPerioid", "monitorPeriod")
                        .WithMany("Businesses")
                        .HasForeignKey("monitorPeriodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("address");

                    b.Navigation("BuinessPlan1");

                    b.Navigation("BuinessPlan2");

                    b.Navigation("BusinessManagementMode");

                    b.Navigation("businessType");

                    b.Navigation("monitor");

                    b.Navigation("monitorPeriod");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("DAL.Models.Customer_Related.Business_Situation", b =>
                {
                    b.HasOne("DAL.Models.Customer_Related.Person", "Person")
                        .WithOne("Business_Situation")
                        .HasForeignKey("DAL.Models.Customer_Related.Business_Situation", "BS_Business_Person_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("DAL.Models.Customer_Related.Entittlment", b =>
                {
                    b.HasOne("DAL.Models.Customer_Related.Person", "Person")
                        .WithMany("Entittlment")
                        .HasForeignKey("Entittlment_Person_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("DAL.Models.Customer_Related.Person", b =>
                {
                    b.HasOne("DAL.Models.Genaral.Gender", "Gender")
                        .WithMany("Persons")
                        .HasForeignKey("GenderUser_Gender_ID");

                    b.HasOne("DAL.Models.Contact_Information.Address", "Address")
                        .WithOne("Person")
                        .HasForeignKey("DAL.Models.Customer_Related.Person", "Person_Address")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Monitoring_Information.Person_Type", "PersonType")
                        .WithMany("Persons")
                        .HasForeignKey("Person_Type")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Genaral.BusinessOrLivelihoodRelocation", "businessOrLivelihoodRelocation")
                        .WithMany("Persons")
                        .HasForeignKey("businessOrLivelihoodRelocationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Models.Genaral.EducationLevel", "educationLevel")
                        .WithMany("Persons")
                        .HasForeignKey("educationalLevelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Models.Genaral.MartialStatus", "maritalStatus")
                        .WithMany("Persons")
                        .HasForeignKey("martialStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("businessOrLivelihoodRelocation");

                    b.Navigation("educationLevel");

                    b.Navigation("Gender");

                    b.Navigation("maritalStatus");

                    b.Navigation("PersonType");
                });

            modelBuilder.Entity("DAL.Models.Genaral.BusinessGeneral", b =>
                {
                    b.HasOne("DAL.Models.Monitoring_Information.Business_Plan", "business_Plan")
                        .WithMany("businessGeneral")
                        .HasForeignKey("BusineesPlanId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Models.Monitoring_Information.BusinessType", "businessType")
                        .WithMany("businessGeneral")
                        .HasForeignKey("BusinessTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Models.Customer_Related.Person", "person")
                        .WithOne("businessGeneral")
                        .HasForeignKey("DAL.Models.Genaral.BusinessGeneral", "PersonId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("business_Plan");

                    b.Navigation("businessType");

                    b.Navigation("person");
                });

            modelBuilder.Entity("DAL.Models.Genaral.EmployeeGeneral", b =>
                {
                    b.HasOne("DAL.Models.Customer_Related.Person", "person")
                        .WithOne("employeeGeneral")
                        .HasForeignKey("DAL.Models.Genaral.EmployeeGeneral", "PersonId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("person");
                });

            modelBuilder.Entity("DAL.Models.Genaral.EventwiseParticipants", b =>
                {
                    b.HasOne("DAL.Models.Genaral.Intervention", "Interventions")
                        .WithMany("Participants")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Interventions");
                });

            modelBuilder.Entity("DAL.Models.Genaral.PhaseOutGeneral", b =>
                {
                    b.HasOne("DAL.Models.Customer_Related.Person", "person")
                        .WithOne("phaseOutGeneral")
                        .HasForeignKey("DAL.Models.Genaral.PhaseOutGeneral", "PersonID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("person");
                });

            modelBuilder.Entity("DAL.Models.Genaral.ThreeWheelGeneral", b =>
                {
                    b.HasOne("DAL.Models.Customer_Related.Person", "person")
                        .WithOne("threeWheelGeneral")
                        .HasForeignKey("DAL.Models.Genaral.ThreeWheelGeneral", "PersonId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("person");
                });

            modelBuilder.Entity("DAL.Models.Monitoring_Information.BusinessMonitorDocuments", b =>
                {
                    b.HasOne("DAL.Models.Customer_Related.Business", "business")
                        .WithMany("businessMonitorDocuments")
                        .HasForeignKey("Business_ID");

                    b.Navigation("business");
                });

            modelBuilder.Entity("DAL.Models.Monitoring_Information.BusinessMonitorImages", b =>
                {
                    b.HasOne("DAL.Models.Customer_Related.Business", "business")
                        .WithMany("businessMonitorImages")
                        .HasForeignKey("Business_ID");

                    b.Navigation("business");
                });

            modelBuilder.Entity("DAL.Models.Monitoring_Information.BusinessMonitorVideos", b =>
                {
                    b.HasOne("DAL.Models.Customer_Related.Business", "business")
                        .WithMany("businessMonitorVideos")
                        .HasForeignKey("Business_ID");

                    b.Navigation("business");
                });

            modelBuilder.Entity("DAL.Models.Monitoring_Information.EmployeeMonitorDocuments", b =>
                {
                    b.HasOne("DAL.Models.Monitoring_Information.Employment", "employee")
                        .WithMany("employeeMonitorDocuments")
                        .HasForeignKey("EmployeeMonitorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("employee");
                });

            modelBuilder.Entity("DAL.Models.Monitoring_Information.EmployeeMonitorImages", b =>
                {
                    b.HasOne("DAL.Models.Monitoring_Information.Employment", "employee")
                        .WithMany("employeeMonitorImages")
                        .HasForeignKey("EmployeeMonitorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("employee");
                });

            modelBuilder.Entity("DAL.Models.Monitoring_Information.EmployeeMonitorVideos", b =>
                {
                    b.HasOne("DAL.Models.Monitoring_Information.Employment", "employee")
                        .WithMany("employeeMonitorVideos")
                        .HasForeignKey("EmployeeMonitorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("employee");
                });

            modelBuilder.Entity("DAL.Models.Monitoring_Information.Employment", b =>
                {
                    b.HasOne("DAL.Models.Contact_Information.Address", "address")
                        .WithOne("employment")
                        .HasForeignKey("DAL.Models.Monitoring_Information.Employment", "EmployementAddressId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DAL.Models.Monitoring_Information.Employment_Status", "EmploymentStatus")
                        .WithMany("Employment")
                        .HasForeignKey("Employment_Status")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Models.Monitoring_Information.Employment_Type", "EmploymentType")
                        .WithMany("Employment")
                        .HasForeignKey("Employment_Type")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Models.Monitoring_Information.JobEngagement", "jobengagement")
                        .WithMany("Employement")
                        .HasForeignKey("JobengagementID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Models.Monitoring_Information.Monitor", "monitor")
                        .WithOne("Employment")
                        .HasForeignKey("DAL.Models.Monitoring_Information.Employment", "MonitorID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Models.Customer_Related.Person", "Person")
                        .WithMany("Employment")
                        .HasForeignKey("Person_ID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DAL.Models.Monitoring_Information.MonitorPerioid", "monitorPeriod")
                        .WithMany("Employment")
                        .HasForeignKey("monitorPeriodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("address");

                    b.Navigation("EmploymentStatus");

                    b.Navigation("EmploymentType");

                    b.Navigation("jobengagement");

                    b.Navigation("monitor");

                    b.Navigation("monitorPeriod");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("DAL.Models.Monitoring_Information.Monitor", b =>
                {
                    b.HasOne("DAL.Models.Monitoring_Information.Monitor_Duration", "MonitorDuration")
                        .WithMany("Monitor")
                        .HasForeignKey("Monitor_Duration")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Models.Customer_Related.Person", "Person")
                        .WithMany("Monitor")
                        .HasForeignKey("Monitor_Person_ID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("MonitorDuration");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("DAL.Models.Monitoring_Information.PhaseOutMonitorDocuments", b =>
                {
                    b.HasOne("DAL.Models.Monitoring_Information.phaseOut", "PhaseOut")
                        .WithMany("phaseOutMonitorDocuments")
                        .HasForeignKey("EmployeeMonitorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PhaseOut");
                });

            modelBuilder.Entity("DAL.Models.Monitoring_Information.PhaseOutMonitorImages", b =>
                {
                    b.HasOne("DAL.Models.Monitoring_Information.phaseOut", "PhaseOut")
                        .WithMany("phaseOutMonitorImages")
                        .HasForeignKey("EmployeeMonitorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PhaseOut");
                });

            modelBuilder.Entity("DAL.Models.Monitoring_Information.PhaseOutMonitorVideos", b =>
                {
                    b.HasOne("DAL.Models.Monitoring_Information.phaseOut", "PhaseOut")
                        .WithMany("phaseOutMonitorVideos")
                        .HasForeignKey("EmployeeMonitorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PhaseOut");
                });

            modelBuilder.Entity("DAL.Models.Monitoring_Information.ThreeWheelMonitorDocuments", b =>
                {
                    b.HasOne("DAL.Models.Monitoring_Information.ThreeWheeler", "ThreeWheel")
                        .WithMany("threeWheelMonitorDocuments")
                        .HasForeignKey("EmployeeMonitorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ThreeWheel");
                });

            modelBuilder.Entity("DAL.Models.Monitoring_Information.ThreeWheelMonitorImages", b =>
                {
                    b.HasOne("DAL.Models.Monitoring_Information.ThreeWheeler", "ThreeWheel")
                        .WithMany("threeWheelMonitorImages")
                        .HasForeignKey("EmployeeMonitorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ThreeWheel");
                });

            modelBuilder.Entity("DAL.Models.Monitoring_Information.ThreeWheelMonitorVideos", b =>
                {
                    b.HasOne("DAL.Models.Monitoring_Information.ThreeWheeler", "ThreeWheel")
                        .WithMany("threeWheelMonitorVideos")
                        .HasForeignKey("EmployeeMonitorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ThreeWheel");
                });

            modelBuilder.Entity("DAL.Models.Monitoring_Information.ThreeWheeler", b =>
                {
                    b.HasOne("DAL.Models.Monitoring_Information.Monitor", "Monitor")
                        .WithOne("ThreeWheeler")
                        .HasForeignKey("DAL.Models.Monitoring_Information.ThreeWheeler", "MonitorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Models.Customer_Related.Person", "person")
                        .WithMany("ThreeWheeler")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DAL.Models.Monitoring_Information.MonitorPerioid", "monitorPeriod")
                        .WithMany("ThreeWheeler")
                        .HasForeignKey("monitorPeriodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Monitor");

                    b.Navigation("monitorPeriod");

                    b.Navigation("person");
                });

            modelBuilder.Entity("DAL.Models.Monitoring_Information.Training", b =>
                {
                    b.HasOne("DAL.Models.Customer_Related.Person", "Person")
                        .WithMany("Training")
                        .HasForeignKey("Training_Person_ID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DAL.Models.Monitoring_Information.Training_Type", "TrainingType")
                        .WithMany("Training")
                        .HasForeignKey("Training_Type")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("TrainingType");
                });

            modelBuilder.Entity("DAL.Models.Monitoring_Information.Vulnerability", b =>
                {
                    b.HasOne("DAL.Models.Monitoring_Information.Vulnerability_Level", "VulnerabilityLevel")
                        .WithMany("Vulnerability")
                        .HasForeignKey("Vulnerability_Level")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Models.Customer_Related.Person", "Person")
                        .WithOne("Vulnerability")
                        .HasForeignKey("DAL.Models.Monitoring_Information.Vulnerability", "Vulnerability_Person_ID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DAL.Models.Monitoring_Information.Vulnerability_Type", "VulnerabilityType")
                        .WithMany("Vulnerability")
                        .HasForeignKey("Vulnerability_Type")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("VulnerabilityLevel");

                    b.Navigation("VulnerabilityType");
                });

            modelBuilder.Entity("DAL.Models.Monitoring_Information.VulnerabilityMonitor", b =>
                {
                    b.HasOne("DAL.Models.Monitoring_Information.Monitor", "monitor")
                        .WithOne("vulnerability")
                        .HasForeignKey("DAL.Models.Monitoring_Information.VulnerabilityMonitor", "MonitorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Models.Customer_Related.Person", "Person")
                        .WithMany("VulnerabilityMonitor")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DAL.Models.Monitoring_Information.Vulnerability", "Vulnerability")
                        .WithMany("MonitorDetails")
                        .HasForeignKey("VulnerabilityID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Models.Monitoring_Information.MonitorPerioid", "monitorPeriod")
                        .WithMany("VulnerabilityMonitor")
                        .HasForeignKey("monitorPeriodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("monitor");

                    b.Navigation("monitorPeriod");

                    b.Navigation("Person");

                    b.Navigation("Vulnerability");
                });

            modelBuilder.Entity("DAL.Models.Monitoring_Information.phaseOut", b =>
                {
                    b.HasOne("DAL.Models.Monitoring_Information.Monitor", "monitor")
                        .WithOne("PhaseOut")
                        .HasForeignKey("DAL.Models.Monitoring_Information.phaseOut", "MonitorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Models.Customer_Related.Person", "person")
                        .WithMany("phaseOut")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DAL.Models.Monitoring_Information.MonitorPerioid", "monitorPeriod")
                        .WithMany("phaseOut")
                        .HasForeignKey("monitorPeriodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("monitor");

                    b.Navigation("monitorPeriod");

                    b.Navigation("person");
                });

            modelBuilder.Entity("DAL.Models.Order", b =>
                {
                    b.HasOne("DAL.Models.ApplicationUser", "Cashier")
                        .WithMany("Orders")
                        .HasForeignKey("CashierId");

                    b.HasOne("DAL.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cashier");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("DAL.Models.OrderDetail", b =>
                {
                    b.HasOne("DAL.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DAL.Models.Product", b =>
                {
                    b.HasOne("DAL.Models.Product", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DAL.Models.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("DAL.Models.ApplicationRole", null)
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DAL.Models.ApplicationUser", null)
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DAL.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("DAL.Models.ApplicationRole", null)
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.ApplicationUser", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DAL.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Models.ApplicationRole", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("DAL.Models.ApplicationUser", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Orders");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("DAL.Models.Bank_Information.Bank", b =>
                {
                    b.Navigation("Bank_Account");

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("DAL.Models.Bank_Information.Bank_Account_Type", b =>
                {
                    b.Navigation("Bank_Account");
                });

            modelBuilder.Entity("DAL.Models.Bank_Information.Bank_Branch", b =>
                {
                    b.Navigation("Bank_Account");
                });

            modelBuilder.Entity("DAL.Models.Bank_Information.Bank_Type", b =>
                {
                    b.Navigation("bank");
                });

            modelBuilder.Entity("DAL.Models.Contact_Information.Address", b =>
                {
                    b.Navigation("business");

                    b.Navigation("employment");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("DAL.Models.Contact_Information.City", b =>
                {
                    b.Navigation("address");
                });

            modelBuilder.Entity("DAL.Models.Contact_Information.Country", b =>
                {
                    b.Navigation("address");

                    b.Navigation("city");

                    b.Navigation("district");

                    b.Navigation("states");
                });

            modelBuilder.Entity("DAL.Models.Contact_Information.District", b =>
                {
                    b.Navigation("address");

                    b.Navigation("city");
                });

            modelBuilder.Entity("DAL.Models.Contact_Information.States", b =>
                {
                    b.Navigation("address");

                    b.Navigation("city");

                    b.Navigation("district");
                });

            modelBuilder.Entity("DAL.Models.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("DAL.Models.Customer_Related.Business", b =>
                {
                    b.Navigation("businessMonitorDocuments");

                    b.Navigation("businessMonitorImages");

                    b.Navigation("businessMonitorVideos");

                    b.Navigation("businessStaff");

                    b.Navigation("businessStocks");

                    b.Navigation("businessVehicle");

                    b.Navigation("cilentele");

                    b.Navigation("machinaryEquipment");

                    b.Navigation("managementPractices");

                    b.Navigation("shopspace");
                });

            modelBuilder.Entity("DAL.Models.Customer_Related.Person", b =>
                {
                    b.Navigation("apBusinessDocs");

                    b.Navigation("apDocuments");

                    b.Navigation("apImages");

                    b.Navigation("apUserImage");

                    b.Navigation("apVideos");

                    b.Navigation("Bank");

                    b.Navigation("Business");

                    b.Navigation("Business_Situation");

                    b.Navigation("businessGeneral");

                    b.Navigation("employeeGeneral");

                    b.Navigation("Employment");

                    b.Navigation("Entittlment");

                    b.Navigation("Monitor");

                    b.Navigation("phaseOut");

                    b.Navigation("phaseOutGeneral");

                    b.Navigation("ThreeWheeler");

                    b.Navigation("threeWheelGeneral");

                    b.Navigation("Training");

                    b.Navigation("Vulnerability");

                    b.Navigation("VulnerabilityMonitor");
                });

            modelBuilder.Entity("DAL.Models.Genaral.BusinessOrLivelihoodRelocation", b =>
                {
                    b.Navigation("Persons");
                });

            modelBuilder.Entity("DAL.Models.Genaral.EducationLevel", b =>
                {
                    b.Navigation("Persons");
                });

            modelBuilder.Entity("DAL.Models.Genaral.Gender", b =>
                {
                    b.Navigation("Persons");
                });

            modelBuilder.Entity("DAL.Models.Genaral.Intervention", b =>
                {
                    b.Navigation("Participants");
                });

            modelBuilder.Entity("DAL.Models.Genaral.MartialStatus", b =>
                {
                    b.Navigation("Persons");
                });

            modelBuilder.Entity("DAL.Models.Monitoring_Information.BusinessType", b =>
                {
                    b.Navigation("Business");

                    b.Navigation("businessGeneral");
                });

            modelBuilder.Entity("DAL.Models.Monitoring_Information.Business_Management_Mode", b =>
                {
                    b.Navigation("Business");
                });

            modelBuilder.Entity("DAL.Models.Monitoring_Information.Business_Plan", b =>
                {
                    b.Navigation("Business");

                    b.Navigation("businessGeneral");
                });

            modelBuilder.Entity("DAL.Models.Monitoring_Information.Employment", b =>
                {
                    b.Navigation("employeeMonitorDocuments");

                    b.Navigation("employeeMonitorImages");

                    b.Navigation("employeeMonitorVideos");
                });

            modelBuilder.Entity("DAL.Models.Monitoring_Information.Employment_Status", b =>
                {
                    b.Navigation("Employment");
                });

            modelBuilder.Entity("DAL.Models.Monitoring_Information.Employment_Type", b =>
                {
                    b.Navigation("Employment");
                });

            modelBuilder.Entity("DAL.Models.Monitoring_Information.JobEngagement", b =>
                {
                    b.Navigation("Employement");
                });

            modelBuilder.Entity("DAL.Models.Monitoring_Information.Monitor", b =>
                {
                    b.Navigation("Business");

                    b.Navigation("Employment");

                    b.Navigation("PhaseOut");

                    b.Navigation("ThreeWheeler");

                    b.Navigation("vulnerability");
                });

            modelBuilder.Entity("DAL.Models.Monitoring_Information.MonitorPerioid", b =>
                {
                    b.Navigation("Businesses");

                    b.Navigation("Employment");

                    b.Navigation("phaseOut");

                    b.Navigation("ThreeWheeler");

                    b.Navigation("VulnerabilityMonitor");
                });

            modelBuilder.Entity("DAL.Models.Monitoring_Information.Monitor_Duration", b =>
                {
                    b.Navigation("Monitor");
                });

            modelBuilder.Entity("DAL.Models.Monitoring_Information.Person_Type", b =>
                {
                    b.Navigation("Persons");
                });

            modelBuilder.Entity("DAL.Models.Monitoring_Information.ThreeWheeler", b =>
                {
                    b.Navigation("threeWheelMonitorDocuments");

                    b.Navigation("threeWheelMonitorImages");

                    b.Navigation("threeWheelMonitorVideos");
                });

            modelBuilder.Entity("DAL.Models.Monitoring_Information.Training_Type", b =>
                {
                    b.Navigation("Training");
                });

            modelBuilder.Entity("DAL.Models.Monitoring_Information.Vulnerability", b =>
                {
                    b.Navigation("MonitorDetails");
                });

            modelBuilder.Entity("DAL.Models.Monitoring_Information.Vulnerability_Level", b =>
                {
                    b.Navigation("Vulnerability");
                });

            modelBuilder.Entity("DAL.Models.Monitoring_Information.Vulnerability_Type", b =>
                {
                    b.Navigation("Vulnerability");
                });

            modelBuilder.Entity("DAL.Models.Monitoring_Information.phaseOut", b =>
                {
                    b.Navigation("phaseOutMonitorDocuments");

                    b.Navigation("phaseOutMonitorImages");

                    b.Navigation("phaseOutMonitorVideos");
                });

            modelBuilder.Entity("DAL.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("DAL.Models.Product", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("DAL.Models.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
